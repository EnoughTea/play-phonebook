# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile

play.modules {
  # By default, Play will load any class called Module that is defined in the root package (the "app" directory),
  # or you can define them explicitly below.
  enabled += bootstrap.PhonebookDatabaseModule
}

## IDE
# https://www.playframework.com/documentation/latest/IDE
# ~~~~~
# Depending on your IDE, you can add a hyperlink for errors that will jump you directly to the code location in the IDE in dev mode.
# The following line makes use of the IntelliJ IDEA REST interface:
play.editor = "http://localhost:63342/api/file/?file=%s&line=%s"

## Internationalisation
# https://www.playframework.com/documentation/latest/ScalaI18N
# ~~~~~
play.i18n {
  # The application languages
  langs = ["en"]

  # Whether the language cookie should be secure or not
  # langCookieSecure = true

  # Whether the HTTP only attribute of the cookie should be set to true
  langCookieHttpOnly = true
}


## Play HTTP settings
# ~~~~~
play.http {
  ## Secret key
  # http://www.playframework.com/documentation/latest/ApplicationSecret
  # ~~~~~
  # The secret key is used to sign Play's session cookie. This must be changed for production, but we don't recommend you change it in this file.
  secret {
    key = "changeme"
    key = ${?APPLICATION_SECRET}
  }

  ## Session & Flash
  # https://www.playframework.com/documentation/latest/ScalaSessionFlash
  # ~~~~~
  session {
    cookieName = "PLAY_SESSION"

    # Sets the cookie to be sent only over HTTPS.
    # secure = true

    # Sets the cookie to be accessed only by the server.
    httpOnly = true
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    # secure = true

    # Sets the cookie to be accessed only by the server.
    httpOnly = true
  }
}


## Cache
# https://www.playframework.com/documentation/latest/ScalaCache
# ~~~~~
# Play comes with an integrated cache API that can reduce the operational overhead of repeated requests.
# You must enable this by adding to build.sbt:
# libraryDependencies += cache
play.cache {
  # If you want to bind several caches, you can bind the individually
  # bindCaches = ["db-cache", "user-cache", "session-cache"]
}

## Filters
# https://www.playframework.com/documentation/latest/ScalaHttpFilters
# ~~~~~
# Filters run code on every request. They can be used to perform common logic for all your actions, e.g. adding common headers.
# There are a number of built-in filters that can be enabled and configured to give Play greater security.
play.filters {
  # Enabled filters are run automatically against Play.
  # CSRFFilter, AllowedHostFilters, and SecurityHeadersFilters are enabled by default.
  # enabled += filters.ExampleFilter

  # Disabled filters remove elements from the enabled list.

  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    # pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    # allowedOrigins = ["http://www.example.com"]

    # The allowed HTTP methods. If null, all methods are allowed
    # allowedHttpMethods = ["GET", "POST"]
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    cookie {
      name = "PHONEBOOK_CSRF_COOKIE"
    }
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    allowed = ["localhost:9443", "localhost:9000", "localhost:19001"]
  }
}

## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary:
  # db.default.enabled = false
  db.default.autoApply = true
  db.default.autoApplyDowns = true
}


## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  config = "db"
  default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    hikaricp.minimumIdle = 50
    hikaricp.maximumPoolSize = 50
  }
}

## JDBC Datasource
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#
slick {
  dbs {
    # You can declare as many datasources as you want. By convention, the default datasource is named `default`
    default {
      # https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
      driver = "slick.jdbc.H2Profile$"
      db.driver = "org.h2.Driver"
      db.url = "jdbc:h2:mem:play;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=FALSE"
      db.username = sa
      db.password = ""

      # You can turn on SQL logging for any datasource
      # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
      #default.logSql=true
    }
  }
}
